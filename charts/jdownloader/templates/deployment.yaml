apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "jdownloader.fullname" . }}
  labels:
    {{- include "jdownloader.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "jdownloader.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "jdownloader.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "jdownloader.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if eq .Values.vpn.enabled "true" }}
      volumes:
        - name: tun-device
          hostPath:
            path: {{ .Values.vpn.tunDevice }}
      {{- end }}
      containers:
        {{- if eq .Values.vpn.enabled "true" }}
        - name: {{ .Values.vpn.name }}
          securityContext:
            {{- toYaml .Values.vpn.securityContext | nindent 12 }}
          image: "{{ .Values.vpn.image }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: tun-device
              mountPath: /dev/net/tun
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            {{- range .Values.vpn.env }}
            - name: {{ .name }}
              value: "{{ .value }}"
            {{- end }}
        {{- end }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if eq .Values.vpn.enabled "false" }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          env:
            - name: "WEB_LISTENING_PORT"
              value: "{{ .Values.service.port }}"
          {{ else }}
          command: ["WEB_LISTENING_PORT={{ .Values.service.port }} /bin/sh"]
          args: ["startapp.sh"]
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
